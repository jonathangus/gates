/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ArbiGates, ArbiGatesInterface } from "../ArbiGates";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "gateId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "creator",
        type: "address",
      },
    ],
    name: "Created",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_conditions",
        type: "bytes",
      },
    ],
    name: "add",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "conditions",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "gates",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000805534801561001457600080fd5b50610684806100246000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806326c50007146100465780633a7dbc1214610076578063ba658111146100a6575b600080fd5b610060600480360381019061005b91906102d7565b6100c2565b60405161006d919061039d565b60405180910390f35b610090600480360381019061008b91906103f5565b610162565b60405161009d9190610431565b60405180910390f35b6100c060048036038101906100bb91906104b1565b61017a565b005b600160205280600052604060002060009150905080546100e19061052d565b80601f016020809104026020016040519081016040528092919081815260200182805461010d9061052d565b801561015a5780601f1061012f5761010080835404028352916020019161015a565b820191906000526020600020905b81548152906001019060200180831161013d57829003601f168201915b505050505081565b60026020528060005260406000206000915090505481565b81816001600080548152602001908152602001600020919061019d9291906101f4565b507f7757890bcab34d673dfca6b71df1b57f75a2fe4231d6e8de726caf534ab1fdd6600054336040516101d19291906105ae565b60405180910390a16000808154809291906101eb90610606565b91905055505050565b8280546102009061052d565b90600052602060002090601f0160209004810192826102225760008555610269565b82601f1061023b57803560ff1916838001178555610269565b82800160010185558215610269579182015b8281111561026857823582559160200191906001019061024d565b5b509050610276919061027a565b5090565b5b8082111561029357600081600090555060010161027b565b5090565b600080fd5b600080fd5b6000819050919050565b6102b4816102a1565b81146102bf57600080fd5b50565b6000813590506102d1816102ab565b92915050565b6000602082840312156102ed576102ec610297565b5b60006102fb848285016102c2565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561033e578082015181840152602081019050610323565b8381111561034d576000848401525b50505050565b6000601f19601f8301169050919050565b600061036f82610304565b610379818561030f565b9350610389818560208601610320565b61039281610353565b840191505092915050565b600060208201905081810360008301526103b78184610364565b905092915050565b6000819050919050565b6103d2816103bf565b81146103dd57600080fd5b50565b6000813590506103ef816103c9565b92915050565b60006020828403121561040b5761040a610297565b5b6000610419848285016103e0565b91505092915050565b61042b816103bf565b82525050565b60006020820190506104466000830184610422565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126104715761047061044c565b5b8235905067ffffffffffffffff81111561048e5761048d610451565b5b6020830191508360018202830111156104aa576104a9610456565b5b9250929050565b600080602083850312156104c8576104c7610297565b5b600083013567ffffffffffffffff8111156104e6576104e561029c565b5b6104f28582860161045b565b92509250509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061054557607f821691505b602082108103610558576105576104fe565b5b50919050565b610567816102a1565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105988261056d565b9050919050565b6105a88161058d565b82525050565b60006040820190506105c3600083018561055e565b6105d0602083018461059f565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610611826102a1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610643576106426105d7565b5b60018201905091905056fea2646970667358221220df25d4d3c260c149f28e6b23aa302185f07d79561db227272ca920e6ef6c69bc64736f6c634300080e0033";

type ArbiGatesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ArbiGatesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ArbiGates__factory extends ContractFactory {
  constructor(...args: ArbiGatesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ArbiGates";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ArbiGates> {
    return super.deploy(overrides || {}) as Promise<ArbiGates>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ArbiGates {
    return super.attach(address) as ArbiGates;
  }
  connect(signer: Signer): ArbiGates__factory {
    return super.connect(signer) as ArbiGates__factory;
  }
  static readonly contractName: "ArbiGates";
  public readonly contractName: "ArbiGates";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArbiGatesInterface {
    return new utils.Interface(_abi) as ArbiGatesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ArbiGates {
    return new Contract(address, _abi, signerOrProvider) as ArbiGates;
  }
}
