{
  "address": "0x5241FEC04A8f10b5F2993b32a2b5b3B55e27ef20",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gateId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "Created",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "snapshotId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gateId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "SnapshotCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_conditions",
          "type": "bytes"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "conditions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gateId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "createSnapShot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "snapshotId",
          "type": "bytes32"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0637807e3a4bc05c5d8883b8a5b92c43249f829e818b65f8e76ae60ccff403b0",
  "receipt": {
    "to": null,
    "from": "0xA4B7CEe8409673624EC9B075f5A4f9b8EbAdEd49",
    "contractAddress": "0x5241FEC04A8f10b5F2993b32a2b5b3B55e27ef20",
    "transactionIndex": 1,
    "gasUsed": "690631",
    "logsBloom": "0x
    "blockHash": "0x844520e4a65bec8060a794ccdc02ed8311e877599c35e7a1b5943d4f7b4c9a85",
    "transactionHash": "0x0637807e3a4bc05c5d8883b8a5b92c43249f829e818b65f8e76ae60ccff403b0",
    "logs": [],
    "blockNumber": 682593,
    "cumulativeGasUsed": "690631",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "fb26d2d765bb3b5b7cbd41a2601291e7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gateId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"snapshotId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gateId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"SnapshotCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_conditions\",\"type\":\"bytes\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"conditions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gateId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"createSnapShot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"snapshotId\",\"type\":\"bytes32\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Gates.sol\":\"Gates\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"contracts/Gates.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\nimport {MerkleProof} from '@openzeppelin/contracts/utils/cryptography/MerkleProof.sol';\\n\\ncontract Gates {\\n    uint256 count = 0;\\n    mapping(uint256 => bytes) public conditions;\\n    mapping(bytes32 => address[]) public gates;\\n\\n    event Created(uint256 gateId, address creator);\\n    event SnapshotCreated(bytes32 snapshotId, uint256 gateId, address creator);\\n\\n    function add(bytes calldata _conditions) public {\\n        conditions[count] = _conditions;\\n        emit Created(count, msg.sender);\\n        count++;\\n    }\\n\\n    function verify(address user, bytes32 snapshotId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        // TODO create merkle tree or zkproof\\n        for (uint256 i = 0; i < gates[snapshotId].length; i++) {\\n            if (gates[snapshotId][i] == user) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function createSnapShot(uint256 gateId, address[] calldata addresses)\\n        public\\n    {\\n        bytes32 id = keccak256(abi.encodePacked(gateId, msg.sender));\\n        gates[id] = addresses;\\n        emit SnapshotCreated(id, gateId, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x1e2772c7bbcec60b4f97b06ac5de014703b8973bad30b09cbff36e026cedd2b9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000805534801561001457600080fd5b50610b84806100246000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630dd5ee1b1461005c57806326c500071461008c5780636abd81db146100bc578063ba658111146100ec578063e3c39bbf14610108575b600080fd5b610076600480360381019061007191906105cf565b610124565b604051610083919061062a565b60405180910390f35b6100a660048036038101906100a1919061067b565b6101f5565b6040516100b39190610741565b60405180910390f35b6100d660048036038101906100d19190610763565b610295565b6040516100e391906107b2565b60405180910390f35b61010660048036038101906101019190610832565b6102e3565b005b610122600480360381019061011d91906108d5565b61035d565b005b600080600090505b60026000848152602001908152602001600020805490508110156101e9578373ffffffffffffffffffffffffffffffffffffffff1660026000858152602001908152602001600020828154811061018657610185610935565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036101d65760019150506101ef565b80806101e190610993565b91505061012c565b50600090505b92915050565b6001602052806000526040600020600091509050805461021490610a0a565b80601f016020809104026020016040519081016040528092919081815260200182805461024090610a0a565b801561028d5780601f106102625761010080835404028352916020019161028d565b820191906000526020600020905b81548152906001019060200180831161027057829003601f168201915b505050505081565b600260205281600052604060002081815481106102b157600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8181600160008054815260200190815260200160002091906103069291906103ee565b507f7757890bcab34d673dfca6b71df1b57f75a2fe4231d6e8de726caf534ab1fdd66000543360405161033a929190610a4a565b60405180910390a160008081548092919061035490610993565b91905055505050565b60008333604051602001610372929190610adc565b60405160208183030381529060405280519060200120905082826002600084815260200190815260200160002091906103ac929190610474565b507fe95b26e6130d2ac5a0d1860688592ca2a6b4ece3f93867d3c4b70968d2001bc18185336040516103e093929190610b17565b60405180910390a150505050565b8280546103fa90610a0a565b90600052602060002090601f01602090048101928261041c5760008555610463565b82601f1061043557803560ff1916838001178555610463565b82800160010185558215610463579182015b82811115610462578235825591602001919060010190610447565b5b5090506104709190610514565b5090565b828054828255906000526020600020908101928215610503579160200282015b8281111561050257823573ffffffffffffffffffffffffffffffffffffffff168260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610494565b5b5090506105109190610514565b5090565b5b8082111561052d576000816000905550600101610515565b5090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105668261053b565b9050919050565b6105768161055b565b811461058157600080fd5b50565b6000813590506105938161056d565b92915050565b6000819050919050565b6105ac81610599565b81146105b757600080fd5b50565b6000813590506105c9816105a3565b92915050565b600080604083850312156105e6576105e5610531565b5b60006105f485828601610584565b9250506020610605858286016105ba565b9150509250929050565b60008115159050919050565b6106248161060f565b82525050565b600060208201905061063f600083018461061b565b92915050565b6000819050919050565b61065881610645565b811461066357600080fd5b50565b6000813590506106758161064f565b92915050565b60006020828403121561069157610690610531565b5b600061069f84828501610666565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156106e25780820151818401526020810190506106c7565b838111156106f1576000848401525b50505050565b6000601f19601f8301169050919050565b6000610713826106a8565b61071d81856106b3565b935061072d8185602086016106c4565b610736816106f7565b840191505092915050565b6000602082019050818103600083015261075b8184610708565b905092915050565b6000806040838503121561077a57610779610531565b5b6000610788858286016105ba565b925050602061079985828601610666565b9150509250929050565b6107ac8161055b565b82525050565b60006020820190506107c760008301846107a3565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126107f2576107f16107cd565b5b8235905067ffffffffffffffff81111561080f5761080e6107d2565b5b60208301915083600182028301111561082b5761082a6107d7565b5b9250929050565b6000806020838503121561084957610848610531565b5b600083013567ffffffffffffffff81111561086757610866610536565b5b610873858286016107dc565b92509250509250929050565b60008083601f840112610895576108946107cd565b5b8235905067ffffffffffffffff8111156108b2576108b16107d2565b5b6020830191508360208202830111156108ce576108cd6107d7565b5b9250929050565b6000806000604084860312156108ee576108ed610531565b5b60006108fc86828701610666565b935050602084013567ffffffffffffffff81111561091d5761091c610536565b5b6109298682870161087f565b92509250509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061099e82610645565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036109d0576109cf610964565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610a2257607f821691505b602082108103610a3557610a346109db565b5b50919050565b610a4481610645565b82525050565b6000604082019050610a5f6000830185610a3b565b610a6c60208301846107a3565b9392505050565b6000819050919050565b610a8e610a8982610645565b610a73565b82525050565b60008160601b9050919050565b6000610aac82610a94565b9050919050565b6000610abe82610aa1565b9050919050565b610ad6610ad18261055b565b610ab3565b82525050565b6000610ae88285610a7d565b602082019150610af88284610ac5565b6014820191508190509392505050565b610b1181610599565b82525050565b6000606082019050610b2c6000830186610b08565b610b396020830185610a3b565b610b4660408301846107a3565b94935050505056fea2646970667358221220b8b688d21b8e35dd9bfa19b707c2d2542df7f7587241d385d7e4d5bd9e0cc64964736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80630dd5ee1b1461005c57806326c500071461008c5780636abd81db146100bc578063ba658111146100ec578063e3c39bbf14610108575b600080fd5b610076600480360381019061007191906105cf565b610124565b604051610083919061062a565b60405180910390f35b6100a660048036038101906100a1919061067b565b6101f5565b6040516100b39190610741565b60405180910390f35b6100d660048036038101906100d19190610763565b610295565b6040516100e391906107b2565b60405180910390f35b61010660048036038101906101019190610832565b6102e3565b005b610122600480360381019061011d91906108d5565b61035d565b005b600080600090505b60026000848152602001908152602001600020805490508110156101e9578373ffffffffffffffffffffffffffffffffffffffff1660026000858152602001908152602001600020828154811061018657610185610935565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036101d65760019150506101ef565b80806101e190610993565b91505061012c565b50600090505b92915050565b6001602052806000526040600020600091509050805461021490610a0a565b80601f016020809104026020016040519081016040528092919081815260200182805461024090610a0a565b801561028d5780601f106102625761010080835404028352916020019161028d565b820191906000526020600020905b81548152906001019060200180831161027057829003601f168201915b505050505081565b600260205281600052604060002081815481106102b157600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8181600160008054815260200190815260200160002091906103069291906103ee565b507f7757890bcab34d673dfca6b71df1b57f75a2fe4231d6e8de726caf534ab1fdd66000543360405161033a929190610a4a565b60405180910390a160008081548092919061035490610993565b91905055505050565b60008333604051602001610372929190610adc565b60405160208183030381529060405280519060200120905082826002600084815260200190815260200160002091906103ac929190610474565b507fe95b26e6130d2ac5a0d1860688592ca2a6b4ece3f93867d3c4b70968d2001bc18185336040516103e093929190610b17565b60405180910390a150505050565b8280546103fa90610a0a565b90600052602060002090601f01602090048101928261041c5760008555610463565b82601f1061043557803560ff1916838001178555610463565b82800160010185558215610463579182015b82811115610462578235825591602001919060010190610447565b5b5090506104709190610514565b5090565b828054828255906000526020600020908101928215610503579160200282015b8281111561050257823573ffffffffffffffffffffffffffffffffffffffff168260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610494565b5b5090506105109190610514565b5090565b5b8082111561052d576000816000905550600101610515565b5090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105668261053b565b9050919050565b6105768161055b565b811461058157600080fd5b50565b6000813590506105938161056d565b92915050565b6000819050919050565b6105ac81610599565b81146105b757600080fd5b50565b6000813590506105c9816105a3565b92915050565b600080604083850312156105e6576105e5610531565b5b60006105f485828601610584565b9250506020610605858286016105ba565b9150509250929050565b60008115159050919050565b6106248161060f565b82525050565b600060208201905061063f600083018461061b565b92915050565b6000819050919050565b61065881610645565b811461066357600080fd5b50565b6000813590506106758161064f565b92915050565b60006020828403121561069157610690610531565b5b600061069f84828501610666565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156106e25780820151818401526020810190506106c7565b838111156106f1576000848401525b50505050565b6000601f19601f8301169050919050565b6000610713826106a8565b61071d81856106b3565b935061072d8185602086016106c4565b610736816106f7565b840191505092915050565b6000602082019050818103600083015261075b8184610708565b905092915050565b6000806040838503121561077a57610779610531565b5b6000610788858286016105ba565b925050602061079985828601610666565b9150509250929050565b6107ac8161055b565b82525050565b60006020820190506107c760008301846107a3565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126107f2576107f16107cd565b5b8235905067ffffffffffffffff81111561080f5761080e6107d2565b5b60208301915083600182028301111561082b5761082a6107d7565b5b9250929050565b6000806020838503121561084957610848610531565b5b600083013567ffffffffffffffff81111561086757610866610536565b5b610873858286016107dc565b92509250509250929050565b60008083601f840112610895576108946107cd565b5b8235905067ffffffffffffffff8111156108b2576108b16107d2565b5b6020830191508360208202830111156108ce576108cd6107d7565b5b9250929050565b6000806000604084860312156108ee576108ed610531565b5b60006108fc86828701610666565b935050602084013567ffffffffffffffff81111561091d5761091c610536565b5b6109298682870161087f565b92509250509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061099e82610645565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036109d0576109cf610964565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610a2257607f821691505b602082108103610a3557610a346109db565b5b50919050565b610a4481610645565b82525050565b6000604082019050610a5f6000830185610a3b565b610a6c60208301846107a3565b9392505050565b6000819050919050565b610a8e610a8982610645565b610a73565b82525050565b60008160601b9050919050565b6000610aac82610a94565b9050919050565b6000610abe82610aa1565b9050919050565b610ad6610ad18261055b565b610ab3565b82525050565b6000610ae88285610a7d565b602082019150610af88284610ac5565b6014820191508190509392505050565b610b1181610599565b82525050565b6000606082019050610b2c6000830186610b08565b610b396020830185610a3b565b610b4660408301846107a3565b94935050505056fea2646970667358221220b8b688d21b8e35dd9bfa19b707c2d2542df7f7587241d385d7e4d5bd9e0cc64964736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 508,
        "contract": "contracts/Gates.sol:Gates",
        "label": "count",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 512,
        "contract": "contracts/Gates.sol:Gates",
        "label": "conditions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bytes_storage)"
      },
      {
        "astId": 517,
        "contract": "contracts/Gates.sol:Gates",
        "label": "gates",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}